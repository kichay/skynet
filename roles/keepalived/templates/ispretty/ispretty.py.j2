#!/bin/python

import select, re, os, sys
from glob import glob
from systemd import journal

HOOKS = []
MODULES_PATH = "/etc/ispretty"
sys.path.append(MODULES_PATH)
for dir_entry in glob(os.path.join(MODULES_PATH, "*.py")):
    if os.path.isfile(dir_entry):
        module = os.path.basename(dir_entry)[:-3]
        print("core: loading", module, "module")
        globals()[module] = __import__(module)
        HOOKS.append(globals()[module].hook)
        sys.stdout.flush()

class tQ:

    def __init__(self):
        self.min = 0
        self.max = 100
        self.step = 10
        self.pretty = 50
        self.current = 100
        self.hook = 1
        self.host = ""

    def failed(self, host):
        self.host = host
        if self.current >= self.pretty and self.current - self.step < self.pretty:
            self.hook = 2
        elif self.current != self.min:
            self.hook = 4
        self.current = self.current - self.step
        if self.current < self.min:
            self.current = self.min

    def passed(self, host):
        self.host = host
        if self.current < self.pretty and self.current + self.step >= self.pretty:
            self.hook = 3
        elif self.current != self.max:
            self.hook = 5
        self.current = self.current + self.step
        if self.current > self.max:
            self.current = self.max

    def getHook(self):
        hook = self.hook
        self.hook = 0
        return hook

j = journal.Reader()
j.log_level(journal.LOG_INFO)
j.seek_tail()
j.get_previous()

p = select.poll()
p.register(j, j.get_events())

Q = {}

while p.poll():
    if j.process() != journal.APPEND:
        continue

    for entry in j:
        if 'UNIT' in entry and 'JOB_RESULT' in entry:
            r = re.search('^ping@(.*)_(.*)\.service$', entry['UNIT'])
            if r:
                if not r.group(2) in Q.keys():
                    Q[r.group(2)] = tQ()
                    print("core: got new mark:", r.group(2))
                if entry['JOB_RESULT'] == 'done':
                    Q[r.group(2)].passed(r.group(1))
                    print("core: passed ping probe to", r.group(1), "marked with", r.group(2))
                else:
                    Q[r.group(2)].failed(r.group(1))
                    print("core: failed ping probe to", r.group(1), "marked with", r.group(2))
                for m in Q:
                    h = Q[m].getHook()
                    for f in HOOKS:
                        f(h, m, Q[m])
                sys.stdout.flush()
